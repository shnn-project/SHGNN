name: Build and Publish Python Wheels

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check and test the Rust code
  check:
    name: Check Rust Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run tests
        run: cargo test --all-features

  # Build wheels for different platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path crates/shnn-python/Cargo.toml
          sccache: 'true'
          manylinux: auto
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4
      
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path crates/shnn-python/Cargo.toml
      
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # Test wheels
  test-wheels:
    name: Test wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [build-wheels, build-sdist]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      
      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy  # Install numpy first
          python -m pip install --find-links dist --no-index shnn-python
      
      - name: Test basic import
        run: |
          python -c "import shnn; print(f'SHNN version: {shnn.__version__}')"
          python -c "import shnn; network = shnn.Network(100, 0.1); print('Basic functionality works!')"

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test-wheels]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/shnn-python
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      
      - name: Publish to PyPI
        uses: PyPA/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  # Publish to Test PyPI on pushes to main
  publish-test:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test-wheels]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/shnn-python
    permissions:
      id-token: write
    
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      
      - name: Publish to Test PyPI
        uses: PyPA/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/

  # Create GitHub release with wheels
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test-wheels]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true